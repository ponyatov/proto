## @file
## @brief prototype knowledge database implementation /stage 1/

## @defgroup stage1 Stage 1
## @brief Autogenerated @ref stage1 in S1.py
## @{

import os,sys

## @defgroup s1sym Symbolic class system
## @{

## base object class, such named for avoiding Python3 interference with `Object`
class Qbject:
    ## construct as `<type:value>` pair 
    ## **universal object can hold nested elements**
    def __init__(self,V):
        ## object type
        self.type = self.__class__.__name__.lower()
        ## single value
        self.value = V
        ## `attr{}`ibutes /associative array/
        self.attr = {}
        ## init `nest[]`ed elements /ordered vector/
        self.nest = []
        
    ## `print object` operator
    def __repr__(self): return self.dump()
    ## full dump in tree form
    ## @returns string 
    def dump(self,depth=0,prefix=''):
        S = self.pad(depth) + self.head(prefix)
        for i in self.attr:
            S += self.attr[i].dump(depth+1,prefix='%s = '%i)
        return S
    ## left pad for treee output
    ## @returns string `'\\n\\t...'`
    def pad(self,N): return '\n' + '\t'*N
    ## short header-only dump
    ## @returns string `<type:value>` 
    def head(self,prefix=''): return '%s<%s:%s>' % (prefix,self.type,self.value)
    
    ## `container[key]=object` operator: **store to object** by attribute key 
    def __setitem__(self,key,o): self.attr[key] = o ; return self
    ## `object[key]` operator: **lookup** in `attr{}`ibutes
    def __getitem__(self,key): return self.attr[key]

## @defgroup s1prim Primitive
## @{

class Primitive(Qbject): pass

class Symbol(Primitive): pass

## @}

## @defgroup s1container Container
## @{

class Container(Qbject): pass

class Stack(Container): pass

class Map(Container): pass

## @}

## @defgroup s1active Active
## @{

class Active(Qbject): pass

class Function(Active): pass

class Operator(Qbject): pass

## @}

## @}

## @defgroup s1lexer Syntax parser
## @{

## @}

## @defgroup s1fvm oFORTH Virtual Machine
## @{

## @}

## @defgroup s1gui GUI
## @brief light set of GUI view/controllers and micro/IDE
## @{

import wx, wx.stc

## GUI element
class GUI(Qbject): pass

## window
class Frame(GUI):
    ## construct window
    def __init__(self,V):
        GUI.__init__(self, V)
        ## wrapped wxframe
        self.frame = wx.Frame(None,title=V) ; self.frame.Show()

## menu        
class Menu(GUI):
    ## construct menu
    ## @param[in] frame owner frame  
    def __init__(self,frame):
        GUI.__init__(self, frame.value)
        ## menubar
        self.menubar = wx.MenuBar() ; frame.frame.SetMenuBar(self.menubar)
        ## file menu
        self.file = wx.Menu() ; self.menubar.Append(self.file,'&File')
        self.file.Append(wx.ID_SAVE,'&Save')
        self.file.Append(wx.ID_APPLY,'&Backup\tCtrl+E')
        ## file/quit
        self.quit = self.file.Append(wx.ID_EXIT,'&Quit')
        ## debug menu
        self.debug = wx.Menu() ; self.menubar.Append(self.debug,'&Debug')
        ## debug/update
        self.update = self.debug.Append(wx.ID_REFRESH,'&Update\tF12')
        ## debug/vocabulary dump window toggle
        self.voc = self.debug.Append(wx.ID_ANY,'&Vocabulary\tF8',kind=wx.ITEM_CHECK)
        ## debug/stack dump window toggle
        self.stack = self.debug.Append(wx.ID_ANY,'&Stack\tF9',kind=wx.ITEM_CHECK)
        ## help menu
        self.help = wx.Menu() ; self.menubar.Append(self.help,'&Help')
        ## help/about
        self.about = self.help.Append(wx.ID_ABOUT,'&About\tF1')
        
## editor (base GUI widget in micro IDE)
class Editor(GUI):
    ## construct editor
    ## @param[in] V with given file name (and title)
    def __init__(self,V):
        GUI.__init__(self, V)
        frame = self['frame'] = Frame(V)
        menu = self['menu'] = Menu(frame)
        frame.frame.Bind(wx.EVT_MENU,self.onClose,menu.quit)
        ## wx.StyledTextEditor wrapper
        self.editor = wx.stc.StyledTextCtrl(frame.frame)
        ## set default styling in editor
        self.editor.SetTabWidth(4)
        self.editor.StyleSetSpec(wx.stc.STC_STYLE_DEFAULT,
                        'face:%s,size:%s' % (font.FaceName, font.PointSize))
        self.onLoad()
    ## event on editor exit
    def onClose(self,event): self['frame'].frame.Close()
    ## event on editor start (load file from window title)
    def onLoad(self):
        F = open(self.value,'r') ; self.editor.SetValue(F.read()) ; F.close()

## @}

## @}

## wxPython application
wxapp = wx.App()

# large monospace font adopted for screen size
## fetch screen height as base for font scale
displaY = wx.GetDisplaySizeMM()[1]
## fetch available font from system
font = wx.Font(displaY / 0x10,
               wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD)

print Editor(sys.argv[0]+'.src')

wxapp.MainLoop()
